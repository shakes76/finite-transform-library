#summary FRTW Description and Structure
#labels Featured,Phase-Implementation

= Introduction =

FRTW is especially designed to do Discrete Radon Transforms (DRT). These include the Fast/Finite Radon Transform (FRT) of Bolker, Grigoryan, Gertner, Fill and others (1986-1989) and the Mojette Transform of Guedon et al. (1995). See my [http://arxiv.org/abs/1006.1965 pre-print paper "Fast Mojette Transform for Discrete Tomography"] on these transforms for more details.

The library depends on [http://www.fftw.org/ FFTW] and NTTW, the latter of which is also part of the FTL libraries.

= Details =

The library is structured as follows. The modules include are:
  * Radon module for DRTs (radon.h/.c).
  * Noise module using Random Number Generators for producing Gaussian/Poisson noise (noise.h/.c).
  * Mojette module for the (Fast) Mojette Transform operations (mojette.h/.c).
  * Vector (nD) module for simple vector operations (vector.h/.c).
  * Complex Array wrappers of the FFTW complex arrays (array_complex.h/.c).
  * Fourier module for using FFTW (fourier.h/.c).
See the [http://finitetransform.sourceforge.net/frtw_api/index.html FRTW API] documentation for more details.

= Apps =
== Fast Mojette Transform ==
There are two ways to compute the Fast Mojette Transform (FMT). Firstly, one may do the following, where the commands or options are in round brackets:
  # Generate the Farey angle set (fmt_angle) corresponding to either the simple (2) angle set or the L1-norm angle set (1).
  # Mojette Transform (mt) the image using the generated angle set.
  # Then convert the projections to the Fast/Finite Radon Transform (FRT) (mt2frt). This generates the FRT space which my be inverted using the iFRT app. as a test, the app automatically generates this for you at the time of writing this guide.

Secondly, one may to the following:
  # Simply run the FMT app (fmt), where the angle set is generated, MT is taken and converted to FRT projections on the fly and a FRT space produced.
  # Run the inverse FMT (ifmt) app to invert the result, which just happens to be similar to the inverse FRT app (ifrt).

== Fast/Finite Radon Transform ==
The apps included are drt, frt and ifrt for dyadic (power of two sizes). The DRT is a cubic complexity implementation of the FRT.

== Others ==
Apps mse, crop and line produce the Mean Squared Error, crop an image to specific size and produce a Diophantine line file for lines within the FRT. The latter is a file that can be viewed in [http://code.google.com/p/discrete-geometry-viewer/ DGV].